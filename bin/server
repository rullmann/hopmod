#!/bin/sh

bin/env.sh

execOnServer(){
    if [ -p serverexec ] 
    then
        echo $1 > serverexec
    fi
}

case "$1" in
    'start')

        if [ -p serverexec ]
        then
            echo "It appears the game server is already running."
            exit 1
        fi
        
        # enable core dump
        ulimit -c unlimited
        
        # cleanup and initiation
        rm -f log/status.log
        touch log/status.log
        touch log/error.log
        ERROR_START=`stat -c %s log/error.log`
        ERROR_START=$(( $ERROR_START + 1 ))
        
        # start the game server as a background process
        nohup bin/sauer_server $SERVER_OPTIONS 1>log/status.log 2>>log/error.log </dev/null &
        
        #wait for server to start up and print the initial status messages
        until `cat log/status.log | grep -q *READY*`
        do
            #stop if server has terminated
            jobs %- > /dev/null 2>&1
            RUNNING=$?
            if [ "$RUNNING" = "1" ]
            then
                break
            fi
        done
        
        tail -c +$ERROR_START log/error.log
        cat log/status.log
        
        #TODO start up a shell
;;
    'restart')
        execOnServer restart
;;
    'stop')
        execOnServer shutdown
;;
    'start_ircbot')
        nohup bin/irc_bot.pl 1>>log/irc.log 2>>log/irc.log </dev/null &
;;
    'stop_ircbot')
        execOnServer stop_ircbot
;;
    'script_tests')
        bin/lunit -i bin/luashell script/db/test/stats_testsuite.lua
;;
    'status')
        out=`tty`
        execOnServer "printserverstatus [$out]"
        sleep 1
;;
    *)
        $0 start
esac
